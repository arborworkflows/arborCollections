{
    "connections": [
        {
            "input": "table",
            "input_step": "Extract species names from a trait matrix",
            "name": "table"
        },
        {
            "input": "originalTable",
            "input_step": "Replace Matrix Names with OpenTree Composite Names",
            "name": "table"
        },
        {
            "input": "inputTree",
            "input_step": "Geiger treedata",
            "output": "tree",
            "output_step": "Return the OpenTree subtree from a node list"
        },
        {
            "input": "inputMatrix",
            "input_step": "Geiger treedata",
            "output": "tableWithOpenTreeNames",
            "output_step": "Replace Matrix Names with OpenTree Composite Names"
        },
        {
            "name": "cleanedTree",
            "output": "cleanedTree",
            "output_step": "Geiger treedata"
        },
        {
            "name": "cleanedMatrix",
            "output": "cleanedMatrix",
            "output_step": "Geiger treedata"
        },
        {
            "input": "nameTable",
            "input_step": "Lookup names using OpenTree Taxonomy first return 1",
            "output": "outtable",
            "output_step": "Extract species names from a trait matrix"
        },
        {
            "input": "table",
            "input_step": "Return the OpenTree subtree from a node list",
            "output": "outTable",
            "output_step": "Lookup names using OpenTree Taxonomy first return 1"
        },
        {
            "input": "ottIdTable",
            "input_step": "Replace Matrix Names with OpenTree Composite Names",
            "output": "outTable",
            "output_step": "Lookup names using OpenTree Taxonomy first return 1"
        }
    ],
    "inputs": [
        {
            "description": "output single column table of only unique names from the input char. matrix",
            "format": "csv",
            "name": "table",
            "type": "table",
            "x": 17,
            "y": 40
        }
    ],
    "mode": "workflow",
    "name": "Create Matched Induced Tree and Matrix from Table",
    "outputs": [
        {
            "format": "r.apetree",
            "name": "cleanedTree",
            "type": "tree",
            "x": 1222,
            "y": 87
        },
        {
            "format": "r.dataframe",
            "name": "cleanedMatrix",
            "type": "table",
            "x": 1204,
            "y": 261
        }
    ],
    "steps": [
        {
            "id": "Extract species names from a trait matrix",
            "name": "Extract species names from a trait matrix",
            "task": {
                "inputs": [
                    {
                        "description": "output single column table of only unique names from the input char. matrix",
                        "format": "csv",
                        "name": "table",
                        "type": "table"
                    }
                ],
                "mode": "python",
                "name": "Extract species names from a trait matrix",
                "outputs": [
                    {
                        "description": "single column table with unique names from input character matrix",
                        "format": "rows",
                        "name": "outtable",
                        "type": "table"
                    }
                ],
                "script": "#\n# input a character matrix in CSV. Output a table of unique species names from the matrix. Each\n# name appears in only one row and is suitable for lookup in OpenTree. \n#\n# update history:\n# 9/18/14 CRL added 'x' for species columns as it is assigned by R sometimes\n#\n\nimport csv\n\nlines = table.splitlines(True)\nrownum = 0\nouttable = []\nfieldrecord = []\nnamelist = []\n\nfor row in csv.reader(lines):\n    if rownum == 0:\n        header = row\n        print \"header row: \",header\n        # setup the column header for the output table \n        for colnum,columntitle in enumerate(row):\n            if header[colnum] in ['Scientific Name','species','Species','scientific name','name']:\n                fieldrecord.append(header[colnum])\n        rownum = rownum+1\n    else:\n        characterEntry = dict()\n        for colnum,columntitle in enumerate(row):\n            characterEntry[header[colnum]] = columntitle\n        if ('Scientific Name' in characterEntry.keys()) and (characterEntry['Scientific Name'] not in namelist) :\n            namelist.append({'Scientific Name': characterEntry['Scientific Name']})\n        elif ('scientific name' in characterEntry.keys()) and (characterEntry['scientific name'] not in namelist):\n            namelist.append({'scientific name' : characterEntry['scientific name']})\n        elif ('species' in characterEntry.keys()) and (characterEntry['species'] not in namelist):\n            namelist.append({'species': characterEntry['species']})\n        elif ('Species' in characterEntry.keys()) and (characterEntry['Species'] not in namelist):\n            namelist.append({'Species': characterEntry['Species']})\n        elif ('name' in characterEntry.keys()) and (characterEntry['name'] not in namelist):\n            namelist.append({'name': characterEntry['name']})\n        elif ('x' in characterEntry.keys()) and (characterEntry['x'] not in namelist):\n            namelist.append({'name': characterEntry['name']})\n\n\n# create an output table one column wide with an entry for each unique name in the character matrix\nouttable = {'fields': fieldrecord,\n            'rows':  namelist}\n            \n            ",
                "x": 229,
                "y": 89
            },
            "x": 229,
            "y": 89
        },
        {
            "id": "Replace Matrix Names with OpenTree Composite Names",
            "name": "Replace Matrix Names with OpenTree Composite Names",
            "task": {
                "inputs": [
                    {
                        "format": "rows",
                        "name": "originalTable",
                        "type": "table"
                    },
                    {
                        "format": "rows",
                        "name": "ottIdTable",
                        "type": "table"
                    }
                ],
                "mode": "python",
                "name": "Replace Matrix Names with OpenTree Composite Names",
                "outputs": [
                    {
                        "format": "rows",
                        "name": "tableWithOpenTreeNames",
                        "type": "table"
                    },
                    {
                        "format": "text",
                        "name": "debugstring",
                        "type": "string"
                    }
                ],
                "script": "#\n# input: originalTable\n# input: ottIdTable\n#\n\n# allowed name field columns\nallowedSpeciesColumnNames = ['species','name','Species','x','scientific name','Scientific Name']\n\n# get variables pointing to the original table that contains all trait columns \ninfields = originalTable['fields']\ninrows = originalTable['rows']\n# get a pointer to the 3 column name lookup table (with original name, ottName, ottId fields)\nottrows = ottIdTable['rows']\n\n# find a matching column for the species names.  We have to be indirect because the column could have several\n# headings.  Find a match and then return the index of the match\n\ndef findMatchingOttTableRow(originalName):\n    global ottrows,inrows\n    matched = False\n    index = -1\n    for rownum in range(len(ottrows)):\n        for attrib in ottrows[rownum]:\n            if attrib in allowedSpeciesColumnNames:\n                if (ottrows[rownum][attrib]).lower() == originalName.lower():\n                    index = rownum\n                    break\n    return index\n    \noutrows = []\ndebugstring = ''\n\ndef findIndexOfNameInFields(fields):\n    global allowedSpeciesColumnNames\n    index = 0\n    for field in fields:\n        if field in allowedSpeciesColumnNames:\n            break\n        index += 1\n    return index\n    \n\n# go through the table a row at a time, since there might be less rows in the ottTable, lets use it as the index\nfor rownum in range(len(inrows)):\n    outrow = {}\n    matched = False\n    # look at each column in the table\n    for field in inrows[rownum]:\n        # if this is the name column, replace the orignal name with a name of the form ottGenus_ottSpecies_ott<ottId>\n        if field in allowedSpeciesColumnNames:\n            ottIndex = findMatchingOttTableRow(inrows[rownum][field])\n            if ottIndex >= 0:\n                debugstring += 'name:'+inrows[rownum][field]+' matched to index '+str(ottIndex)+'\\n'\n                newname = (ottrows[ottIndex]['ottName']).replace(\" \",\"_\")+\"_ott\"+str(ottrows[ottIndex]['ottId'])\n                outrow[field] = newname\n                matched = True\n        else:\n            # if not the name field, copy data through and preserve name\n            outrow[field] = inrows[rownum][field]\n    # finished processing all fields, so add this output row, but only if it matched the ottTable\n    if matched == True:\n        outrows.append(outrow)\n        \n# create the output column list\noutcolumns = []\nfor attrib in outrows[0]:\n    outcolumns.append(attrib)\n    \n# now reorder the field list so the species names are in the front\nspeciesIndex = findIndexOfNameInFields(outcolumns)\nif speciesIndex != 0:\n    #switch the names with the current first attribute to put species names first\n    tempSaveAttribute = outcolumns[0]\n    currentSpeciesColumnName = outcolumns[speciesIndex]\n    outcolumns[0] = currentSpeciesColumnName\n    outcolumns[speciesIndex] = tempSaveAttribute\n\n    \ntableWithOpenTreeNames = {\n    'fields': outcolumns,\n    'rows': outrows}\n    \n    ",
                "x": 616,
                "y": 36
            },
            "x": 616,
            "y": 36
        },
        {
            "id": "Return the OpenTree subtree from a node list",
            "name": "Return the OpenTree subtree from a node list",
            "task": {
                "inputs": [
                    {
                        "description": "input matrix containing a column ottid",
                        "format": "rows",
                        "name": "table",
                        "type": "table"
                    }
                ],
                "mode": "python",
                "name": "Return the OpenTree subtree from a node list",
                "outputs": [
                    {
                        "format": "newick",
                        "name": "tree",
                        "type": "tree"
                    },
                    {
                        "description": "quick preview read out of the tree as a newick string",
                        "format": "text",
                        "name": "treeNewickString",
                        "type": "string"
                    }
                ],
                "script": "import requests\n\nrows = table['rows']\nidList = []\nfor i in range(len(rows)):\n    idList.append(rows[i]['ottId'])\n\n# lookup the tree that contains these nodes\n#payload = {\"ottIds\": idList}\n#resp = requests.post('http://api.opentreeoflife.org/treemachine/v1/getDraftTreeSubtreeForNodes',data=payload)\n#tree = str(resp.json()[\"subtree\"])\n\n# moving to API v2\npayload = {\"ott_ids\": idList}\nresp = requests.post('http://api.opentreeoflife.org/v2/tree_of_life/induced_subtree',data=payload)\ntree = str(resp.json()[\"subtree\"])\n\n# create output table to list any problem IDs\n# u'ott_ids_not_in_tree': [], u'node_ids_not_in_tree': [], u'node_ids_not_in_graph': [], 'ott_ids_not_in_graph': [xxxxxxx]\n\n# tree as a string to preview \ntreeNewickString = tree\n",
                "x": 692,
                "y": 280
            },
            "x": 692,
            "y": 280
        },
        {
            "id": "Geiger treedata",
            "name": "Geiger treedata",
            "task": {
                "inputs": [
                    {
                        "format": "r.apetree",
                        "name": "inputTree",
                        "type": "tree"
                    },
                    {
                        "format": "r.dataframe",
                        "name": "inputMatrix",
                        "type": "table"
                    }
                ],
                "mode": "r",
                "name": "Geiger treedata",
                "outputs": [
                    {
                        "format": "r.apetree",
                        "name": "cleanedTree",
                        "type": "tree"
                    },
                    {
                        "format": "r.dataframe",
                        "name": "cleanedMatrix",
                        "type": "table"
                    }
                ],
                "script": "library(geiger)\nrow.names(inputMatrix) <- inputMatrix$species\nmodelResult <- treedata(phy=inputTree,data=inputMatrix,sort=FALSE)\ncleanedTree <- modelResult$phy\ncleanedMatrix <- modelResult$dat\n\n",
                "x": 981,
                "y": 138
            },
            "x": 981,
            "y": 138
        },
        {
            "id": "Lookup names using OpenTree Taxonomy first return 1",
            "name": "Lookup names using OpenTree Taxonomy first return 1",
            "task": {
                "inputs": [
                    {
                        "format": "rows",
                        "name": "nameTable",
                        "type": "table"
                    }
                ],
                "mode": "python",
                "name": "Lookup names using OpenTree Taxonomy first return",
                "outputs": [
                    {
                        "format": "rows",
                        "name": "outTable",
                        "type": "table"
                    }
                ],
                "script": "#\n# Lookup names using OpenTree Taxonomy\n#\n# description: this analysis expects a single-column input table consisting of scientific names.\n# The analysis consults the OpenTree API and extracts canonical names from the OpenTree taxonomy.\n# The output table consists of three-columns, with the OpenTree name and taxonomy ID columns added to the input. \n#\n# Note:  OpenTree V2 match_names call is being used (development server currently)\n# \n# input: nameTable - single column of scientific names (table:rows format)\n# output: outTable - three column table with OpenTree name and ID appended.\n#\n\n\nimport requests\n\n# look at the rows of the input table\nmatrixEntries = nameTable['rows']\n\n# find out the title of the columns in this matrix. Assuming this is a single column table\ncolumnHeader = nameTable['fields'][0]\n\noutRows = []\ncount = 0\ninputNameList = []\n\nfor matrixEntry in matrixEntries:\n    # build an OTL query to return the matching ottId we want to use to request taxa \n    inputNameList.append(matrixEntry[columnHeader])\n    \n# pack the names into a payload and perform the OpenTree lookup using v2\npayload = {'names': inputNameList}\nresp = requests.post('http://api.opentreeoflife.org/v2/tnrs/match_names',data=payload)\n\nreturnedrecs = resp.json()['results']\n# loop through the names queried and returned\nfor index in range(len(returnedrecs)):\n    thisresult = returnedrecs[index]\n    #for j in range(len(thisresult['matches'])):\n    # force return of the first result for each original name\n    candidate = thisresult['matches'][0]\n    outrow = {}\n    outrow[columnHeader] = candidate['search_string']\n    outrow['ottName'] = candidate['ot:ottTaxonName']\n    outrow['ottId'] = candidate['ot:ottId']\n    outRows.append(outrow)\n\n# build the headers for the output table\naugmentedColumnHeaders = [columnHeader, 'ottName','ottId']\n\n# setup the output in table:rows format with the headers explicitly listed\noutTable = {'fields': augmentedColumnHeaders,\n            'rows':  outRows}\n            \n     "
            },
            "x": 390,
            "y": 312
        }
    ]
}