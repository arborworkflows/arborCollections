{
    "inputs": [
        {
            "format": "text",
            "name": "taxonName",
            "type": "string"
        }
    ],
    "mode": "python",
    "name": "Explore Study Trees (Return Tree Info) from Taxon Name",
    "outputs": [
        {
            "format": "rows",
            "name": "returnedStudies",
            "type": "table"
        }
    ],
    "script": "#\n# OpenTreeExploreNamesFromString\n#\n# description: this analysis expects a comma separated list consisting of scientific names.\n# The analysis consults the OpenTree API and extracts canonical names from the OpenTree taxonomy.\n# The output table consists of several columns containint the OpenTree name and taxonomy ID and other relevant information. \n# \n# input: taxonName - single scientific name(s) separated by commas\n# output: outTable -  table with OpenTree name and ID info returned.\n#\n# maxReturnLength - (could be a parameter, but is defaulted below) max amount of rows of lookups to return\n\n\nimport requests\nimport unicodedata\n\noutrows = []\nstringdebug = ''\n\nreturncount = 0\n\n# ideally, this could be a parameter, but this is an exploratory module, so assume a limit and don't make the \n# user enter it every time\nmaxReturnLength = 100\n\n# build an OTL query to return the matching ottId we want to use to request taxa \npayload = {'property' :'ot:ottTaxonName','value': taxonName,'verbose':'true'}\nresp = requests.post('http://api.opentreeoflife.org/v2/studies/find_trees',data=payload)\n\nreturnedrecs = resp.json()['matched_studies']\n\n# look through all the return records from OpenTree. include them all in the output, but especially\n# traverse the list of trees included in the studies and printout a string that discusses the trees included \n# in the studies\n\nfor index in range(len(returnedrecs)):\n    thisresult = returnedrecs[index]\n    returncount += 1\n    outrows.append(thisresult)\n    # for each returned tree in this study, add some info about it\n    treeinfostring = ''\n    trees = thisresult['matched_trees']\n    for tree in trees:\n        # print out info about the tree, work hard to suppress wierdness from unicode values so the analysis will generally run\n        treeinfostring += \"treeid: \"+unicodedata.normalize('NFKD',tree['oti_tree_id']).encode('ascii','ignore')\n        # only some trees will have branch lengths, so check for existance before printing the info.  \n        if 'ot:branchLengthMode' in tree.keys():\n            # Then some trees have the existance of the field but there is no value entered, so assume these should be filtered out\n            if len(tree['ot:branchLengthMode']) >0:\n                treeinfostring += \" branchlengths: \"+unicodedata.normalize('NFKD',tree['ot:branchLengthMode']).encode('ascii','ignore')\n        treeinfostring += \"; \"\n        #treeinfo.append(treeinfostring)\n    thisresult['tree summary'] = treeinfostring\n        \n\n\n    # if we have already returned the max number of rows, break out of the loop             \n    if returncount>maxReturnLength:\n        break;\n\n\n# build the headers for the output table, the return might be empty, so do crash, just return an empty table\noutColumns = []\nif len(returnedrecs) > 0:\n    for column in returnedrecs[0].keys():\n        outColumns.append(column)\n    \n\n# setup the output in table:rows format with the headers explicitly listed\nreturnedStudies = {'fields': outColumns,\n            'rows':  outrows}\n            \n     "
}