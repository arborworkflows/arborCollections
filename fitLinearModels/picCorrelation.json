{
    "description": "Tests for a correlation between two traits, controlling for phylogeny. Uses PICs and regression forced through the origin.",
    "inputs": [
        {
            "description": "Data table that includes both variables that you want (and other things perhaps)",
            "format": "r.dataframe",
            "id": "table",
            "name": "table",
            "type": "table"
        },
        {
            "description": "Column name for independent variable",
            "domain": {
                "format": "column.names",
                "input": "table"
            },
            "format": "text",
            "id": "ind_variable",
            "name": "ind_variable",
            "type": "string"
        },
        {
            "description": "Column name for dependent variable",
            "domain": {
                "format": "column.names",
                "input": "table"
            },
            "format": "text",
            "id": "dep_variable",
            "name": "dep_variable",
            "type": "string"
        },
        {
            "format": "r.apetree",
            "name": "tree",
            "type": "tree"
        },
        {
            "default": {
                "data": "yes",
                "format": "text",
                "type": "string"
            },
            "domain": [
                "yes",
                "no"
            ],
            "format": "text",
            "name": "plotPICs",
            "type": "string"
        }
    ],
    "mode": "r",
    "name": "picCorrelation",
    "outputs": [
        {
            "description": "Results of PIC regression",
            "format": "r.dataframe",
            "id": "tableResults",
            "name": "tableResults",
            "type": "table"
        },
        {
            "format": "png.base64",
            "name": "picPlot",
            "type": "image"
        }
    ],
    "script": "require(ape)\nrequire(cardoonTools)\nrequire(aRbor)\n\n# Match tree and tip data\n\ntd<-make.treedata(tree, table)\ntree<-tree\n\n# get x and y data with names\n# would be better to have an aRbor function that takes td directly?\n\nx <- select_(td, ind_variable)$dat[[1]]\nnames(x)<-td$tree$tip.label\n\ny <- select_(td, dep_variable)$dat[[1]]\nnames(y)<-td$tree$tip.label\n\n\n\n# calculate independent contrasts\npicX <- pic(x, tree)\npicY <- pic(y, tree)\n\n# run regression forced through the origin\n\nres <- lm(picY~picX-1)\noutput <- anova(res)\n\n\n# coerce into table\ntableResults<-cbind(c(dep_variable, \"Residuals\"), output[,1:5])\ncolnames(tableResults)[1]<-\"Effect\"\n# tableResults are the final results\n\n\nif(plotPICs==\"yes\") {\n    \n    picPlotter <- function () {\n        plot(picX, picY)\n        abline(res)\n    }\n    \n    picPlot <- cardoonPlot(expression(picPlotter()), width=1000, height=1000, res=100)\n    picPlot <- picPlot$png\n}"
}