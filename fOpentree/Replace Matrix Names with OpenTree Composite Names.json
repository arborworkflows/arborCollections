{
    "inputs": [
        {
            "format": "rows",
            "name": "originalTable",
            "type": "table"
        },
        {
            "format": "rows",
            "name": "ottIdTable",
            "type": "table"
        }
    ],
    "mode": "python",
    "name": "Replace Matrix Names with OpenTree Composite Names",
    "outputs": [
        {
            "format": "rows",
            "name": "tableWithOpenTreeNames",
            "type": "table"
        },
        {
            "format": "text",
            "name": "debugstring",
            "type": "string"
        }
    ],
    "script": "#\n# input: originalTable\n# input: ottIdTable\n#\n\n# allowed name field columns\nallowedSpeciesColumnNames = ['species','name','Species','x','scientific name','Scientific Name']\n\n# get variables pointing to the original table that contains all trait columns \ninfields = originalTable['fields']\ninrows = originalTable['rows']\n# get a pointer to the 3 column name lookup table (with original name, ottName, ottId fields)\nottrows = ottIdTable['rows']\n\n# find a matching column for the species names.  We have to be indirect because the column could have several\n# headings.  Find a match and then return the index of the match\n\ndef findMatchingOttTableRow(originalName):\n    global ottrows,inrows\n    matched = False\n    index = -1\n    for rownum in range(len(ottrows)):\n        for attrib in ottrows[rownum]:\n            if attrib in allowedSpeciesColumnNames:\n                if (ottrows[rownum][attrib]).lower() == originalName.lower():\n                    index = rownum\n                    break\n    return index\n    \noutrows = []\ndebugstring = ''\n\ndef findIndexOfNameInFields(fields):\n    global allowedSpeciesColumnNames\n    index = 0\n    for field in fields:\n        if field in allowedSpeciesColumnNames:\n            break\n        index += 1\n    return index\n    \n\n# go through the table a row at a time, since there might be less rows in the ottTable, lets use it as the index\nfor rownum in range(len(inrows)):\n    outrow = {}\n    matched = False\n    # look at each column in the table\n    for field in inrows[rownum]:\n        # if this is the name column, replace the orignal name with a name of the form ottGenus_ottSpecies_ott<ottId>\n        if field in allowedSpeciesColumnNames:\n            ottIndex = findMatchingOttTableRow(inrows[rownum][field])\n            if ottIndex >= 0:\n                debugstring += 'name:'+inrows[rownum][field]+' matched to index '+str(ottIndex)+'\\n'\n                newname = (ottrows[ottIndex]['ottName']).replace(\" \",\"_\")+\"_ott\"+str(ottrows[ottIndex]['ottId'])\n                outrow[field] = newname\n                matched = True\n        else:\n            # if not the name field, copy data through and preserve name\n            outrow[field] = inrows[rownum][field]\n    # finished processing all fields, so add this output row, but only if it matched the ottTable\n    if matched == True:\n        outrows.append(outrow)\n        \n# create the output column list\noutcolumns = []\nfor attrib in outrows[0]:\n    outcolumns.append(attrib)\n    \n# now reorder the field list so the species names are in the front\nspeciesIndex = findIndexOfNameInFields(outcolumns)\nif speciesIndex != 0:\n    #switch the names with the current first attribute to put species names first\n    tempSaveAttribute = outcolumns[0]\n    currentSpeciesColumnName = outcolumns[speciesIndex]\n    outcolumns[0] = currentSpeciesColumnName\n    outcolumns[speciesIndex] = tempSaveAttribute\n\n    \ntableWithOpenTreeNames = {\n    'fields': outcolumns,\n    'rows': outrows}\n    \n    "
}