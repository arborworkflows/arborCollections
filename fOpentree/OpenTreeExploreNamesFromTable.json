{
    "inputs": [
        {
            "description": "input table with scientific names in first column",
            "format": "rows",
            "name": "nameTable",
            "type": "table"
        }
    ],
    "mode": "python",
    "name": "OpenTreeExploreNamesFromTable",
    "outputs": [
        {
            "description": "output with all the OTL lookup information stored",
            "format": "rows",
            "name": "exploreTable",
            "type": "table"
        }
    ],
    "script": "#\n# OpenTreeExploreNamesFromTable\n#\n# description: this analysis expects a table that has a column of scientific names.\n# The analysis consults the OpenTree API and extracts canonical names from the OpenTree taxonomy.\n# The output table consists of several columns containing the OpenTree name and taxonomy ID and other relevant information. All\n# possible TNRS matches are returned for each scientific name in the table, so the output table will have more rows than the input \n# table, but is used for exploration. \n# \n# input: nameTable - list of scientific name(s) in a single column table\n# maxReturnLength - max amount of rows of lookups to return\n# output: exploreTable -  table with OpenTree name and ID info returned (multiple returns)\n#\n\nimport requests\n\n# look at the rows of the input table\nmatrixEntries = nameTable['rows']\n\n# find out the title of the columns in this matrix. Assuming this is a single column table\ncolumnHeader = nameTable['fields'][0]\n\noutColumns = []\nstringdebug = ''\nmaxReturnLength = 1000\n\nreturncount = 0\nfor matrixEntry in matrixEntries:\n    nameEntry = matrixEntry[columnHeader]\n    # build an OTL query to return the matching ottId we want to use to request taxa \n    payload = {'queryString': nameEntry,'contextName':'All life'}\n    stringdebug = stringdebug + \"query: \"+nameEntry + \" \\n\" \n    resp = requests.post('http://api.opentreeoflife.org/taxomachine/v1/autocompleteBoxQuery',data=payload)\n\n    if (resp.json()) and (resp.json()[0]['name']):\n        # now write an output record based on the input, but add  the OpenTree canonical name and taxonomy ID\n        for i in range(len(resp.json())):\n            returncount += 1\n            outputRecord = {}\n            outputRecord['queryname'] = nameEntry\n            outputRecord['name'] =  resp.json()[i]['name']\n            outputRecord['ottId'] = resp.json()[i]['ottId']\n            outputRecord['higher'] = resp.json()[i]['higher']\n            outputRecord['dubious'] = resp.json()[i]['dubious']\n            stringdebug = stringdebug +  \"return: \"+ outputRecord['name'] +\"\\n\"\n            outColumns.append(outputRecord)\n    else:\n        returncount += 1\n        stringdebug = stringdebug + \"found no TNRS match for: \" +nameEntry +\"\\n\"\n        outputRecord = {}\n        outputRecord['queryname'] = nameEntry\n        outputRecord['name'] =  \"found no TNRS match for: \" +nameEntry\n        outputRecord['ottId'] = ''\n        outputRecord['higher'] = ''\n        outputRecord['dubious'] = ''\n        stringdebug = stringdebug +  \"return: \"+ outputRecord['name'] +\"\\n\"\n        outColumns.append(outputRecord)\n\n\n    # if we have already returned the max number of rows, break out of the loop             \n    if returncount>maxReturnLength:\n        break;\n\n\n# build the headers for the output table\naugmentedColumnHeaders = ['queryname', 'name','ottId','higher','dubious']\n\n# setup the output in table:rows format with the headers explicitly listed\nexploreTable = {'fields': augmentedColumnHeaders,\n            'rows':  outColumns}\n            "
}