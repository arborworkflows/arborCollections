{
    "inputs": [
        {
            "description": "comma separated list of names to explore",
            "format": "text",
            "name": "namelist",
            "type": "string"
        }
    ],
    "mode": "python",
    "name": "Explore OpenTree species name completion",
    "outputs": [
        {
            "description": "names discovered by OpenTree",
            "format": "rows",
            "name": "outTable",
            "type": "table"
        }
    ],
    "script": "#\n# OpenTreeExploreNamesFromString\n#\n# description: this analysis expects a comma separated list consisting of scientific names.\n# The analysis consults the OpenTree API and extracts canonical names from the OpenTree taxonomy.\n# The output table consists of several columns containint the OpenTree name and taxonomy ID and other relevant information. \n# \n# input: namelist - list of scientific name(s) separated by commas\n# maxReturnLength - max amount of rows of lookups to return\n# output: outTable -  table with OpenTree name and ID info returned.\n#\n\nimport requests\n\n# should this really be a parameter?  Couldn't get default value to work \nmaxReturnLength = 1000\n\n# condition the list into a python list without whitespace.  Need to allow spaces in scientific names\nnamesplit = namelist.split(\",\")\nfor i in range(len(namesplit)):\n    namesplit[i] = namesplit[i].strip()\n\n# delete null entries in the list before trying to look them up (be tolerant of extra commas) \n#  for example:  \"heliconia, anolis occultus,  stuff,,gorilla,\"\nnameEntries = []\nfor i in range(len(namesplit)):\n    if len(namesplit[i])>0:\n        nameEntries.append(namesplit[i])\n        \noutColumns = []\nstringdebug = ''\n\nreturncount = 0\nfor nameEntry in nameEntries:\n    # build an OTL query to return the matching ottId we want to use to request taxa \n    payload = {'queryString': nameEntry,'contextName':'All life'}\n    stringdebug = stringdebug + \"query: \"+nameEntry + \" \\n\" \n    resp = requests.post('http://api.opentreeoflife.org/taxomachine/v1/autocompleteBoxQuery',data=payload)\n\n    if (resp.json()) and (resp.json()[0]['name']):\n        # now write an output record based on the input, but add  the OpenTree canonical name and taxonomy ID\n        for i in range(len(resp.json())):\n            returncount += 1\n            outputRecord = {}\n            outputRecord['queryname'] = nameEntry\n            outputRecord['name'] =  resp.json()[i]['name']\n            outputRecord['ottId'] = resp.json()[i]['ottId']\n            outputRecord['higher'] = resp.json()[i]['higher']\n            outputRecord['dubious'] = resp.json()[i]['dubious']\n            stringdebug = stringdebug +  \"return: \"+ outputRecord['name'] +\"\\n\"\n            outColumns.append(outputRecord)\n\n            # if we have already returned the max number of rows, break out of the loop             \n            if returncount>maxReturnLength:\n                break;\n    else:\n        stringdebug = stringdebug + \"found no TNRS match for: \" +nameEntry +\"\\n\"\n\n# build the headers for the output table\naugmentedColumnHeaders = ['queryname', 'name','ottId','higher','dubious']\n\n# setup the output in table:rows format with the headers explicitly listed\noutTable = {'fields': augmentedColumnHeaders,\n            'rows':  outColumns}\n            \n     "
}