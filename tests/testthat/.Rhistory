treePlot = treePlot$png
return(list(treePlot=treePlot,result=result,fit=fit))
?expression
treePlot = cardoonPlot(expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5)), width=1000, height=1000, res=100)
expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5))
result
rm(result)
treePlot = cardoonPlot(expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5)), width=1000, height=1000, res=100)
?cardoonPlot
plotContrasts
library(aRbor)
test_file("testTraitModelFitting.R")
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -4.700404, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -4.700404, tolerance=1e-6)
rr
## fitContinuous script
library(aRbor)
library(geiger)
library(cardoonTools)
td <- make.treedata(tree, table)
td <- checkNumeric(td)
valid.numeric <- which(colnames(td$dat)==column)
if(length(valid.numeric)==0){
stop("The supplied column is not present, or is not a valid continuous trait")
}
td <- select(td, valid.numeric)
o <- fitContinuous(td$phy, td$dat, model=model, SE=0)
opt = o$opt
if (model == "OU") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, alpha.param=opt$alpha, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "OU", o$opt$alpha)
} else if (model == "BM") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-td$phy
} else if (model == "EB") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, a=opt$a, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "EB", o$opt$a)
}
treePlot = cardoonPlot(expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5)), width=1000, height=1000, res=100)
treePlot = treePlot$png
return(list(treePlot=treePlot,result=result,fit=fit))
result
test_file("testTraitModelFitting.R")
rr
rr<-fitContinuous.json(table, tree, column, model)
rr
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -3.76019, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
test_file("testTraitModelFitting.R")
test_file("testTraitModelFitting.R")
test_file("testTraitModelFitting.R")
test_file("testTraitModelFitting.R")
test_file("testTraitModelFitting.R")
test_file("testTraitModelFitting.R")
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
library(aRbor)
library(geiger)
library(cardoonTools)
td <- make.treedata(tree, table)
td <- checkNumeric(td)
valid.numeric <- which(colnames(td$dat)==column)
if(length(valid.numeric)==0){
stop("The supplied column is not present, or is not a valid continuous trait")
}
td <- select(td, valid.numeric)
o <- fitContinuous(td$phy, td$dat, model=model, SE=0)
opt = o$opt
if (model == "OU") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, alpha.param=opt$alpha, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "OU", o$opt$alpha)
} else if (model == "BM") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-td$phy
} else if (model == "EB") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, a=opt$a, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "EB", o$opt$a)
}
treePlot = cardoonPlot(expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5)), width=1000, height=1000, res=100)
treePlot = treePlot$png
return(list(treePlot=treePlot,result=result,fit=fit))
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -3.76019, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
?test_that
test_file("testTraitModelFitting.R", enclos=globalenv())
?test_file
test_file("testTraitModelFitting.R", env=globalenv())
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -3.76019, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -3.76019, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -3.76019, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -3.76019, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
require(testthat)
source("../traitModelFitting.R")
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
context("fitContinuous json")
test_that("Output is a list with the correct elements", {
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
expect_that(length(rr), equals(3))
expect_that(names(rr)[1], matches("treePlot"))
expect_that(names(rr)[2], matches("result"))
expect_that(rr[2]$result, is_a("phylo"))
expect_that(names(rr)[3], matches("fit"))
expect_that(rr[3], is_a("list"))
expect_equal(rr[3]$fit$lnL, -3.76019, tolerance=1e-6)
})
context("fitDiscrete json")
test_that("Output is a list with the correct elements", {
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
rr<-fitDiscrete.json(tree, table, column, model)
expect_that(length(rr), equals(2))
expect_that(names(rr)[1], matches("Q"))
expect_that(names(rr)[2], matches("res"))
expect_equal(as.numeric(rr[[1]][1,2]), -0.734343508006695, tolerance=1e-7)
expect_equal(rr[[2]]$lnL, -108.8724, tolerance=1e-6)
})
?cardoonPlot
rr
library(aRbor)
library(geiger)
library(cardoonTools)
td <- make.treedata(tree, table)
td <- checkNumeric(td)
valid.numeric <- which(colnames(td$dat)==column)
if(length(valid.numeric)==0){
stop("The supplied column is not present, or is not a valid continuous trait")
}
td <- select(td, valid.numeric)
o <- fitContinuous(td$phy, td$dat, model=model, SE=0)
opt = o$opt
if (model == "OU") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, alpha.param=opt$alpha, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "OU", o$opt$alpha)
} else if (model == "BM") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-td$phy
} else if (model == "EB") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, a=opt$a, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "EB", o$opt$a)
}
print(result)
rr<-expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5))
print(rr)
cardoonPlot(rr)
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
library(aRbor)
library(geiger)
library(cardoonTools)
td <- make.treedata(tree, table)
td <- checkNumeric(td)
valid.numeric <- which(colnames(td$dat)==column)
if(length(valid.numeric)==0){
stop("The supplied column is not present, or is not a valid continuous trait")
}
td <- select(td, valid.numeric)
o <- fitContinuous(td$phy, td$dat, model=model, SE=0)
opt = o$opt
if (model == "OU") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, alpha.param=opt$alpha, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "OU", o$opt$alpha)
} else if (model == "BM") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-td$phy
} else if (model == "EB") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, a=opt$a, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "EB", o$opt$a)
}
print(result)
rr<-expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5))
print(rr)
cardoonPlot(rr)
rr
deparse(rr)
parse(rr)
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
rr<-fitContinuous.json(table, tree, column, model)
test_file("testTraitModelFitting.R", env=globalenv())
test_file("testTraitModelFitting.R", env=globalenv())
rm(td$phy)
td
rm(td)
test_file("testTraitModelFitting.R", env=globalenv())
test_file("testTraitModelFitting.R", env=globalenv())
test_file("testTraitModelFitting.R"
)
source("testTraitModelFitting.R")
fitContinuous.json(table, tree, column, model)
source("testTraitModelFitting.R")
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
source("testTraitModelFitting.R")
source("testTraitModelFitting.R")
fitContinuous.json(table,tree,column,model)
table
tree
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
fitContinuous.json(table,tree,column,model)
fitDiscrete.json(table,tree,column,model)
fitDiscrete.json(tree,table,column,model)
table<-read.csv("../../sampleDataArbor/anolis.csv")
tree<-read.tree("../../sampleDataArbor/anolis.phy")
column<-"ecomorph"
model<-"ER"
fitDiscrete.json(tree,table,column,model)
tree<-read.tree(text="((A:1.0, B:1.0):1.5, C:2.5);")
table<-matrix(c(1.0, 2.0, 3.0), ncol=1)
rownames(table)<-c("A", "B", "C")
colnames(table)<-"x"
column<-"x"
model<-"BM"
fitContinuous.json(table,tree,column,model)
## fitContinuous script
library(aRbor)
library(geiger)
library(cardoonTools)
td <- make.treedata(tree, table)
td <- checkNumeric(td)
valid.numeric <- which(colnames(td$dat)==column)
if(length(valid.numeric)==0){
stop("The supplied column is not present, or is not a valid continuous trait")
}
td <- select(td, valid.numeric)
o <- fitContinuous(td$phy, td$dat, model=model, SE=0)
opt = o$opt
if (model == "OU") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, alpha.param=opt$alpha, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "OU", o$opt$alpha)
} else if (model == "BM") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-td$phy
} else if (model == "EB") {
fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, a=opt$a, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)
result<-rescale(tree, "EB", o$opt$a)
}
rr<-expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5))
treePlot = cardoonPlot(expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5)), width=1000, height=1000, res=100)
treePlot = treePlot$png
rr
