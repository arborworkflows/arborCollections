<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arbor</title>
    <description>Arbor workflows</description>
    <link>/arborCollections/arborCollections/</link>
    <atom:link href="/arborCollections/arborCollections/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>collapseSingles</title>
        <description>&lt;h1 id=&quot;collapsesingles-function&quot;&gt;collapseSingles: function&lt;/h1&gt;

&lt;h3 id=&quot;collection-phylogenies&quot;&gt;collection: phylogenies&lt;/h3&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Collapses all singleton nodes in a phylogenetic tree (e.g. all nodes with only one descendent).&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Input tree: An input phylogenetic tree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Output tree: Tree with all singleton nodes removed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0100</pubDate>
        <link>/arborCollections/arborCollections/collections/phylogeny/treemanipulate/makeTreeDataMatch/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/collections/phylogeny/treemanipulate/makeTreeDataMatch/</guid>
      </item>
    
      <item>
        <title>convertNexusToApePhylo</title>
        <description>&lt;h1 id=&quot;convertnexustoapephylo-function&quot;&gt;convertNexusToApePhylo: function&lt;/h1&gt;

&lt;h3 id=&quot;collection-phylogenies&quot;&gt;collection: phylogenies&lt;/h3&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Convert a nexus string to an ape phylo object. NOTE: not needed for reading in trees, Arbor can do this automatically.
This function is only needed for certain workflows where one step returns a Nexus string.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;nexusTree: An input phylogenetic tree in nexus format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;tree: A tree in ape phylo format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0100</pubDate>
        <link>/arborCollections/arborCollections/collections/phylogeny/treemanipulate/convertNexusToApePhylo/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/collections/phylogeny/treemanipulate/convertNexusToApePhylo/</guid>
      </item>
    
      <item>
        <title>consistencyIndexAllChars</title>
        <description>&lt;h1 id=&quot;consistencyindexallchars-function&quot;&gt;consistencyIndexAllChars: function&lt;/h1&gt;

&lt;h3 id=&quot;collection-phylogenies&quot;&gt;collection: phylogenies&lt;/h3&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Calculate consistency index across all characters in a data matrix.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;tree: An input phylogenetic tree&lt;/li&gt;
  &lt;li&gt;table: A data matrix&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;result: A table with the consistency index for each character (column) in the original data matrix.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0100</pubDate>
        <link>/arborCollections/arborCollections/collections/phylogeny/charactercalculate/consistencyIndexAllChars/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/collections/phylogeny/charactercalculate/consistencyIndexAllChars/</guid>
      </item>
    
      <item>
        <title>compareTrees</title>
        <description>&lt;h1 id=&quot;comparetrees-function&quot;&gt;compareTrees: function&lt;/h1&gt;

&lt;h3 id=&quot;collection-phylogenies&quot;&gt;collection: phylogenies&lt;/h3&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Compares the topology of two phylogenetic trees using the function phylo.diff from the R package distory.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;t1: An input phylogenetic tree&lt;/li&gt;
  &lt;li&gt;t2: Another input phylogenetic tree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;treeComparePlot: A plot showing all non-matching branches between the two trees.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Chakerian, J. and Holmes, S. P. Computational Tools for Evaluating Phylogenetic and Heirarchical
Clustering Trees. arXiv:1006.1015v1.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0100</pubDate>
        <link>/arborCollections/arborCollections/collections/phylogeny/treecalculate/compareTrees/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/collections/phylogeny/treecalculate/compareTrees/</guid>
      </item>
    
      <item>
        <title>convertTreeToHierarchyTable</title>
        <description>&lt;h1 id=&quot;converttreetohierarchytable-function&quot;&gt;convertTreeToHierarchyTable: function&lt;/h1&gt;

&lt;h3 id=&quot;collection-phylogenies&quot;&gt;collection: phylogenies&lt;/h3&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Converts a phylogenetic tree into a table of monophyletic clades.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;This function does not work.&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;intree: An input phylogenetic tree&lt;/li&gt;
  &lt;li&gt;mode: Either “Full” or “compressed”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;hierarchyTable: A table of monophyletic clades in the tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate>
        <link>/arborCollections/arborCollections/collections/phylogeny/treemanipulate/convertTreeToHierarchyTable/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/collections/phylogeny/treemanipulate/convertTreeToHierarchyTable/</guid>
      </item>
    
      <item>
        <title>congruify</title>
        <description>&lt;h1 id=&quot;congruify-function&quot;&gt;congruify: function&lt;/h1&gt;

&lt;h3 id=&quot;collection-phylogenies&quot;&gt;collection: phylogenies&lt;/h3&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Congruify uses an ultrametric reference tree to rescale a non-ultrametric target tree. This function
uses the reference (and, optionally, a taxonomic linkage table) to inform secondary calibrations in
the target. The primary output is a table of ‘congruent’ nodes between the reference and target with associated dates extracted from corresponding nodes in the reference. If multiple trees are supplied as the reference, a ‘congruification’ table is generated for each. The target is then smoothed by PATHd8 using the
“d8 calculation” (see http://www2.math.su.se/PATHd8/PATHd8manual.pdf).&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;sal=get(data(caudata))
res=congruify.phylo(sal$fam, sal$phy, sal$tax, tol=0, scale=NA, ncores=2)
print(res$calibrations)
plot(ladderize(sal$phy,right=FALSE), cex=0.35, type=”fan”, label.offset=2.5)
plot(ladderize(sal$fam,right=FALSE), cex=0.5, type=”fan”, label.offset=2.5, no.margin=FALSE)&lt;/p&gt;

&lt;p&gt;res=congruify.phylo(sal$fam, sal$phy, sal$tax, tol=0, scale=&quot;PATHd8&quot;)&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;reference: an ultrametric tree used to time-scale the target&lt;/li&gt;
  &lt;li&gt;target: a phylogram that is sought to be ultrametricized based on the reference phylogeny&lt;/li&gt;
  &lt;li&gt;use_taxonomy: T/F flag indicating whether or not a taxonomy should be used&lt;/li&gt;
  &lt;li&gt;taxonomy: a linkage table between tips of the phylogeny and clades represented in the tree; rownames of ‘taxonomy’ should be tips found in the phylogeny&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;calibrations: a table of calibrations for the target&lt;/li&gt;
  &lt;li&gt;calibratedTree: a rescaled, ultrametric, “congruified” target tree&lt;/li&gt;
  &lt;li&gt;treePlot: a plot of calibratedTree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Eastman JM, LJ Harmon, and DC Tank. 2013. Congruification: support for time scaling large phylogenetic trees. Methods in Ecology and Evolution, in press.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate>
        <link>/arborCollections/arborCollections/collections/phylogeny/treemanipulate/congruify/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/collections/phylogeny/treemanipulate/congruify/</guid>
      </item>
    
      <item>
        <title>Megatrees</title>
        <description>&lt;h2 id=&quot;megatrees&quot;&gt;Megatrees&lt;/h2&gt;

&lt;p&gt;TBA&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Oct 2015 00:00:00 +0200</pubDate>
        <link>/arborCollections/arborCollections/tutorials/megatrees/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/tutorials/megatrees/</guid>
      </item>
    
      <item>
        <title>Web services</title>
        <description>&lt;h2 id=&quot;web-services&quot;&gt;Web services&lt;/h2&gt;

&lt;p&gt;TBA&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Sep 2015 00:00:00 +0200</pubDate>
        <link>/arborCollections/arborCollections/tutorials/web-services/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/tutorials/web-services/</guid>
      </item>
    
      <item>
        <title>PGLS</title>
        <description>&lt;h2 id=&quot;use-pgls-to-test-for-a-correlation-between-two-continuous-variables&quot;&gt;Use PGLS to test for a correlation between two continuous variables&lt;/h2&gt;

&lt;p&gt;In this exercise, we will learn how to use PGLS to test for a correlation between two continuous variables. We will use the Arbor function “PGLS,” found in the phylogeny package.&lt;/p&gt;

&lt;p&gt;Imagine that you have a phylogenetic tree with information on two continuous character for some or all of the tips. You want to test whether or not there is an evolutionary correlation between the two traits. PGLS is the way to do this.&lt;/p&gt;

&lt;h2 id=&quot;loading-example-data&quot;&gt;Loading example data&lt;/h2&gt;

&lt;p&gt;For this example, we will use anolis again. Obtain the anolis example data files, phelsuma.phy and phelsuma.csv, from &lt;a href=&quot;/arborCollections/docs_datasets.html&quot;&gt;Arbor datasets&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;p&gt;Now open the &lt;a href=&quot;https://arbor.kitware.com&quot;&gt;Arbor web app&lt;/a&gt;. Drag and drop the two anolis data files on the blue “Browse or drop files” box to load them into your browser.&lt;/p&gt;

&lt;h2 id=&quot;selecting-the-collections-that-you-need&quot;&gt;Selecting the collections that you need&lt;/h2&gt;

&lt;p&gt;For this example, everything required is in the “phylogeny” collection - so click on that eyeball and you will be able to access the functions that you need.&lt;/p&gt;

&lt;p&gt;At this point, you should have the two anolis datafiles stored in Arbor and the “phylogeny” collection available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen1.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this screenshot I am logged in but that is not necessary for this analysis.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-the-pgls-function&quot;&gt;Run the PGLS function&lt;/h2&gt;

&lt;p&gt;Find the PGLS function in the “phylogeny” collection. Select that function now. You can view the source code for it by choosing “show script” (it is in R).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen2.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could use this function in a workflow, as we did in other Arbor tutorials. But for this tutorial let’s just run the function. To do that, click on the button that says “Setup and run.” In the resulting pop-up menu select the following options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen3.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We will be fitting the model SVL ~ awesomeness, so that SVL is the dependent and awesomeness the independent variable. “BM” means that we will fit a model that assumes that the residuals are distributed as expected under a Brownian motion model of evolution along the branches of the tree.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-your-analysis&quot;&gt;Run your analysis&lt;/h2&gt;

&lt;p&gt;Click “&amp;gt; Run” to run the function. Select these options. If your analysis worked, you should see the following message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen4.jpg&quot; alt=&quot;Screenshot&quot; /&gt;.&lt;/p&gt;

&lt;h2 id=&quot;see-your-results&quot;&gt;See your results&lt;/h2&gt;

&lt;p&gt;Now move over to the “visualization” tab to see your results. The PGLS function creates three outputs: one table showing model coefficients like slopes and intercepts; one table showing a summary of model fit and parameter significance; and a plot.&lt;/p&gt;

&lt;p&gt;To see the table results, choose “table” and choose one of the outputs, either “PGLS coefficients” or “PGLS modelfit_summary”. Update shows you the table. For example, the coefficients look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen5.jpg&quot; alt=&quot;Screenshot&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;To see the plot, select “image” under “Select visualization”, and choose your  plot under “data” (it should be called PGLS pglsPlot). Click “update” to see this result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen6.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;try-another-model&quot;&gt;Try another model&lt;/h2&gt;

&lt;p&gt;If you want to use a different option for PGLS, you can choose that in the setup and run window. For example, we can try OU like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen7.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will notice that the coefficients are slightly different, though the main conclusion is unchanged.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen8.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2015 00:00:00 +0200</pubDate>
        <link>/arborCollections/arborCollections/tutorials/PGLS-basic/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/tutorials/PGLS-basic/</guid>
      </item>
    
      <item>
        <title>Continuous ancestral character states</title>
        <description>&lt;h2 id=&quot;how-to-build-a-workflow-that-can-reconstruct-continuous-ancestral-character-states-on-nodes-in-your-tree-using-arbor&quot;&gt;How to build a workflow that can reconstruct continuous ancestral character states on nodes in your tree using Arbor&lt;/h2&gt;

&lt;p&gt;In this exercise, we will learn how to build a workflow that can reconstruct ancestral character states in Arbor for a continuous character - that is, a character that can take on any continuous value, like body weight or limb length.&lt;/p&gt;

&lt;p&gt;This exercise is quite similar to a tutorial for &lt;a href=&quot;/arborCollections/tutorials/reconstructing-ancestral-characters-discrete/&quot;&gt;ancestral state estimation of discrete characters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Imagine that you have a phylogenetic tree with information on some continuous character for some or all of the tips. You want to use mathematical methods to reconstruct the ancestral character states on the internal nodes of the tree under a Brownian motion model. Then, this is the exercise for you!&lt;/p&gt;

&lt;h2 id=&quot;loading-example-data&quot;&gt;Loading example data&lt;/h2&gt;

&lt;p&gt;For this example, we will use a dataset where the species included in the tree and character data do not match perfectly. Obtain the day gecko example data files, phelsuma.phy and phelsuma.csv, from &lt;a href=&quot;/arborCollections/docs_datasets.html&quot;&gt;Arbor datasets&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;p&gt;If you look at these files, you will see that the tree includes a few unique species for which there is no character data. Arbor will recognize this and drop those species from the analysis.&lt;/p&gt;

&lt;p&gt;Now open the &lt;a href=&quot;https://arbor.kitware.com&quot;&gt;Arbor web app&lt;/a&gt;. Drag and drop the two phelsuma data files on the blue “Browse or drop files” box to load them into your browser.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;/arborCollections/2015/06/09/creating-a-new-collection/&quot;&gt;log in and create a personal collection&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;selecting-the-collections-that-you-need&quot;&gt;Selecting the collections that you need&lt;/h2&gt;

&lt;p&gt;For this example, everything required is in the “phylogeny” collection - so click on that eyeball and you will be able to access the functions that you need.&lt;/p&gt;

&lt;p&gt;At this point, you should have the two anolis datafiles stored in Arbor and the “phylogeny” collection available. You should be logged in and have write access to your own private collection.&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-workflow&quot;&gt;Set up your workflow&lt;/h2&gt;

&lt;p&gt;The main function in Arbor for ancestral state reconstruction is aceAcbor in the “phylogeny” collection. Select that function now. You can view the source code for it by choosing “show script” (it is in R).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen1.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will need to use this function in a workflow to calculate ancestral states and return the output. To start, create a new workflow called ContinuousAncestralStatesWorkflow”. Make sure to choose “New workflow” and not “New analysis”!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen2.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now create the connections you need to make the workflow run. First, click the “edit” button to start working on the workflow.&lt;/p&gt;

&lt;p&gt;Now add the aceArbor function by selecting it under “Select analysis.” When you click “Add to workflow” then the function shoud appear in your workspace.&lt;/p&gt;

&lt;p&gt;Now create the inputs and outputs of the function by clicking on the “spokes” coming out of aceArbor. You should also move the blocks around to make your workflow look nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen3.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To see a more detailed walkthrough of making connections in your workflow, see the tutorial &lt;a href=&quot;/arborCollections/tutorials/reconstructing-ancestral-characters-discrete/&quot;&gt;ancestral state estimation of discrete characters&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once you have a workflow that looks the way you want, click save!&lt;/strong&gt; If you do not do this you will be running the workflow at the last point it was saved and not what is shown on the screen.&lt;/p&gt;

&lt;h2 id=&quot;run-your-workflow&quot;&gt;Run your workflow&lt;/h2&gt;

&lt;p&gt;Click “Setup and run” to run your workflow. Select these options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen4.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your analysis worked, you should see the following message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen6.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;see-your-results&quot;&gt;See your results&lt;/h2&gt;

&lt;p&gt;Now move over to the “visualization” tab to see your results. First, select “image” under “Select visualization”, and choose your tree plot under “data” (it should be called ContinuousAncestralStatesWorkflow treePlot). Click “update” to see this result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen7.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see the results in table format, choose “table” and “ContinuousAncestralStatesWorkflow res”. Update gives you this table, which shows the ancestral state estimates and CIs for each node in the tree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen8.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jul 2015 00:00:00 +0200</pubDate>
        <link>/arborCollections/arborCollections/tutorials/reconstructing-ancestral-characters-continuous/</link>
        <guid isPermaLink="true">/arborCollections/arborCollections/tutorials/reconstructing-ancestral-characters-continuous/</guid>
      </item>
    
  </channel>
</rss>
