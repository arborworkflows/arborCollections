<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Arbor</title>
  <generator uri="https://github.com/jekyll/jekyll">Jekyll v3.1.2</generator>
    <icon>/arborCollections/apple-touch-icon-precomposed.png</icon>
  <subtitle>Arbor workflows</subtitle>
  <link href="/arborCollections/atom.xml" rel="self"/>
  <link href="/arborCollections/" rel="alternate" type="text/html"/>
  <updated>2016-03-08T09:58:49+01:00</updated>
  <id>/arborCollections/</id>
  <author>
    <name>Luke Harmon</name>
    <uri>/arborCollections/</uri>
    <email>lukeh@uidaho.edu</email>
  </author>

  
  <entry>
    <title>extractSpeciesNamesFromMatrix</title>
    <link href="/arborCollections/collections/base/matrix/extractSpeciesNamesFromATraitMatrix/"/>
    <updated>2016-03-08T00:00:00+01:00</updated>
    <id>/arborCollections/collections/base/matrix/extractSpeciesNamesFromATraitMatrix</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Identify the column that contains species names and returns a table with only that column. Looks for the first of the following column names: ‘Scientific Name’,’species’,’Species’,’scientific name’,’name’&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;table: A data matrix including species names&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;outtable: Table with one column, the species names.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>Arbor apps</title>
    <link href="/arborCollections/tutorials/arborapps/"/>
    <updated>2016-03-03T00:00:00+01:00</updated>
    <id>/arborCollections/tutorials/arborapps</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/arborCollections/images/easyButtons-1600x800.png&quot;&gt;&lt;br/&gt;
      &lt;h2 id=&quot;what-are-arbor-apps&quot;&gt;What are Arbor apps?&lt;/h2&gt;

&lt;p&gt;As a part of the Arbor project, we are developing a few simple-to-use web apps that allow users to quickly and easily carry out a few of the most common comparative methods. These pages present a drag-and-drop interface to test for phylogenetic signal, reconstruct ancestral character states, test for character correlations, and other common analyses.&lt;/p&gt;

&lt;h2 id=&quot;what-can-i-do-in-arbor-apps&quot;&gt;What can I do in Arbor apps?&lt;/h2&gt;

&lt;p&gt;To use an Arbor app, you can navigate to our &lt;a href=&quot;/arborCollections/arborapps/&quot;&gt;app index&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;walkthrough---phylogenetic-signal-arbor-app&quot;&gt;Walkthrough - Phylogenetic Signal Arbor app&lt;/h2&gt;

&lt;p&gt;Let’s walk through one example analysis in an Arbor app. We will work on testing for phylogenetic signal. I will use two data files for &lt;em&gt;Anolis&lt;/em&gt; lizards, linked below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/arborCollections/assets/anolis.phy&quot;&gt;anolis.phy&lt;/a&gt;: a phylogenetic tree of anoles&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/arborCollections/assets/anolis.csv&quot;&gt;anolis.csv&lt;/a&gt;: character data for anoles (comma-separated format)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download these two files, and locate them on your computer’s file browser.&lt;/p&gt;

&lt;p&gt;Now, navigate to the Arbor app for phylogenetic signal. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/easymode_1.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, you need to input your datafiles into the website. You can do that by dragging and dropping the files onto the blue box that says “browse or drop files here.”&lt;/p&gt;

&lt;p&gt;When you hover over the correct place, the box will turn green. Arbor can automatically detect whether you have uploaded a tree or a data file.&lt;/p&gt;

&lt;p&gt;After you upload both files, you should see them listed in the appropriate place, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/easymode_2.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/easymode_3.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might also notice that you can see a preview of your input table at the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/easymode_4.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you need to specify a column that will define the trait that you want to use for the phylogenetic signal test. Right now, this test can only handle one trait at a time! Let’s choose “SVL.” Grab that column name from the left hand side and drag and drop it onto the box that says “Drag column of interest here.” You should end up with this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/easymode_5.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No just press “Go!” and your analysis will run. You should get back a table of results, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/easymode_6.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last table shows the results of the analysis. The first two columns are the likelihoods of a Brownian motion model and Brownian motion + lambda. The third and fourth represent a chi-squared test comparing a “full” phylogenetic signal model (Brownian motion) with a model where signal is less than Brownian motion (lambda). P &amp;lt; 0.05 means that you can reject BM in favor of the lambda model. The last two columns show AICC scores for these two models. This output is formatted in a very confusing way, we are going to fix it!&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>appendColumnsAccoringToParameterValue</title>
    <link href="/arborCollections/collections/base/matrix/appendColumnsAccordingToParameterValue/"/>
    <updated>2016-03-03T00:00:00+01:00</updated>
    <id>/arborCollections/collections/base/matrix/appendColumnsAccordingToParameterValue</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;inTable1: first input table to be joined&lt;/li&gt;
  &lt;li&gt;inTable2: second table to be joined&lt;/li&gt;
  &lt;li&gt;parameterTable: single row, single column table containing the field name to use for a join&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;outTable: table containing columns from both input tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>aggregateTableByMax</title>
    <link href="/arborCollections/collections/base/matrix/aggregateTableByMax/"/>
    <updated>2016-03-03T00:00:00+01:00</updated>
    <id>/arborCollections/collections/base/matrix/aggregateTableByMax</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Roll up the values of a table’s rows according to discrete values in a selected “groupBy” column. The number of output rows in the table will be equal to the number of discrete values in the groupBy column.&lt;/p&gt;

&lt;p&gt;This is the MAX version of aggregation, so the values in the other columns will be the max value encountered out of all rows which belonged to this group from the input table.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: input table of continuous values&lt;/li&gt;
  &lt;li&gt;column: column name used as the “group by” control&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;output: output table&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>aggregateTableByColumnInParameterTable</title>
    <link href="/arborCollections/collections/base/matrix/aggregateTableByColumnInParameterTable/"/>
    <updated>2016-03-03T00:00:00+01:00</updated>
    <id>/arborCollections/collections/base/matrix/aggregateTableByColumnInParameterTable</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Roll up the values of a table’s rows according to discrete values in a selected “groupBy” column that comes from a table. The number of output rows in the table will be equal to the number of discrete values in the groupBy column.  The values in the other columns will be the average of the values of all rows which belonged to this group from the input table.   Therefore, this is a simple aggregation by one column.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: input table of continuous values&lt;/li&gt;
  &lt;li&gt;column: column name used as the “group by” control is in this single row, single column table&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;output: output table&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>aggregateTableByAverage</title>
    <link href="/arborCollections/collections/base/matrix/aggregateTableByAverage/"/>
    <updated>2016-03-03T00:00:00+01:00</updated>
    <id>/arborCollections/collections/base/matrix/aggregateTableByAverage</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Roll up the values of a table’s rows according to discrete values in a selected “groupBy” column. The number of output rows in the table will be equal to the number of discrete values in the groupBy column.  The values in the other columns will be the average of the values of all rows which belonged to this group from the input table.   Therefore, this is a simple aggregation by one column.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: input table of continuous values&lt;/li&gt;
  &lt;li&gt;column: column name used as the “group by” control&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;output: output table&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>makeTreeDataMatch</title>
    <link href="/arborCollections/collections/phylogeny/treemanipulate/makeTreeDataMatch/"/>
    <updated>2016-03-02T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treemanipulate/makeTreeDataMatch</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Matches the rownames of a data matrix with the tip labels of a phylogenetic tree using the aRbor function make.treedata.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;data(anolis)
td &amp;lt;- make.treedata(anolis$phy, anolis$dat, name_column=1)&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Tree for matching with data: An input phylogenetic tree&lt;/li&gt;
  &lt;li&gt;Table for matching with tree: A data matrix including species names&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;tree_matched: Tree with tip labels that match data names exactly.&lt;/li&gt;
  &lt;li&gt;table_matched: Table with row names that match tree tip labels exactly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>cophylo</title>
    <link href="/arborCollections/collections/phylogeny/treemanipulate/cophylo/"/>
    <updated>2016-03-02T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treemanipulate/cophylo</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Makes a cophylo plot (sometimes called a tanglegram) connecting interacting tips on two trees.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;data(anolis)
td &amp;lt;- make.treedata(anolis$phy, anolis$dat, name_column=1)&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;t1: tree 1&lt;/li&gt;
  &lt;li&gt;t2: tree 2&lt;/li&gt;
  &lt;li&gt;assoc: matrix containing the tip labels in tr1 to match to the tip labels in tr2. Note that not all labels in either tree need to be included; and, furthermore, one label in tr1 can be matched with more than one label in tr2, or vice versa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;cophyloPlot: A plot with tips matched.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Revell, L. 2011. phytools: an R package for phylogenetic comparative biology (and other things). Methods in Ecology and Evolution 3: 217.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>copheneticDistanceMatrixFromTree</title>
    <link href="/arborCollections/collections/phylogeny/treemanipulate/copheneticDistanceMatrixFromTree/"/>
    <updated>2016-03-02T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treemanipulate/copheneticDistanceMatrixFromTree</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Makes a distance matrix from a tree; entries in the matrix are the phylogenetic distance between each pair
of species in the tree&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;tree: An input phylogenetic tree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;table: Tree with pairwise distances&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>convertNexusToApePhylo</title>
    <link href="/arborCollections/collections/phylogeny/treemanipulate/convertNexusToApePhylo/"/>
    <updated>2016-03-02T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treemanipulate/convertNexusToApePhylo</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Convert a nexus string to an ape phylo object. NOTE: not needed for reading in trees, Arbor can do this automatically.
This function is only needed for certain workflows where one step returns a Nexus string.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;nexusTree: An input phylogenetic tree in nexus format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;tree: A tree in ape phylo format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>consistencyIndexAllChars</title>
    <link href="/arborCollections/collections/phylogeny/charactercalculate/consistencyIndexAllChars/"/>
    <updated>2016-03-02T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/charactercalculate/consistencyIndexAllChars</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Calculate consistency index across all characters in a data matrix.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;tree: An input phylogenetic tree&lt;/li&gt;
  &lt;li&gt;table: A data matrix&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;result: A table with the consistency index for each character (column) in the original data matrix.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>compareTrees</title>
    <link href="/arborCollections/collections/phylogeny/treecalculate/compareTrees/"/>
    <updated>2016-03-02T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treecalculate/compareTrees</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Compares the topology of two phylogenetic trees using the function phylo.diff from the R package distory.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;t1: An input phylogenetic tree&lt;/li&gt;
  &lt;li&gt;t2: Another input phylogenetic tree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;treeComparePlot: A plot showing all non-matching branches between the two trees.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Chakerian, J. and Holmes, S. P. Computational Tools for Evaluating Phylogenetic and Heirarchical
Clustering Trees. arXiv:1006.1015v1.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>collapseSingles</title>
    <link href="/arborCollections/collections/phylogeny/treemanipulate/collapseSingles/"/>
    <updated>2016-03-02T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treemanipulate/collapseSingles</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Collapses all singleton nodes in a phylogenetic tree (e.g. all nodes with only one descendent).&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Input tree: An input phylogenetic tree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Output tree: Tree with all singleton nodes removed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>convertTreeToHierarchyTable</title>
    <link href="/arborCollections/collections/phylogeny/treemanipulate/convertTreeToHierarchyTable/"/>
    <updated>2016-03-01T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treemanipulate/convertTreeToHierarchyTable</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Converts a phylogenetic tree into a table of monophyletic clades.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;This function does not work.&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;intree: An input phylogenetic tree&lt;/li&gt;
  &lt;li&gt;mode: Either “Full” or “compressed”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;hierarchyTable: A table of monophyletic clades in the tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>congruify</title>
    <link href="/arborCollections/collections/phylogeny/treemanipulate/congruify/"/>
    <updated>2016-03-01T00:00:00+01:00</updated>
    <id>/arborCollections/collections/phylogeny/treemanipulate/congruify</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Congruify uses an ultrametric reference tree to rescale a non-ultrametric target tree. This function
uses the reference (and, optionally, a taxonomic linkage table) to inform secondary calibrations in
the target. The primary output is a table of ‘congruent’ nodes between the reference and target with associated dates extracted from corresponding nodes in the reference. If multiple trees are supplied as the reference, a ‘congruification’ table is generated for each. The target is then smoothed by PATHd8 using the
“d8 calculation” (see http://www2.math.su.se/PATHd8/PATHd8manual.pdf).&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;sal=get(data(caudata))
res=congruify.phylo(sal$fam, sal$phy, sal$tax, tol=0, scale=NA, ncores=2)
print(res$calibrations)
plot(ladderize(sal$phy,right=FALSE), cex=0.35, type=”fan”, label.offset=2.5)
plot(ladderize(sal$fam,right=FALSE), cex=0.5, type=”fan”, label.offset=2.5, no.margin=FALSE)&lt;/p&gt;

&lt;p&gt;res=congruify.phylo(sal$fam, sal$phy, sal$tax, tol=0, scale=&quot;PATHd8&quot;)&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;reference: an ultrametric tree used to time-scale the target&lt;/li&gt;
  &lt;li&gt;target: a phylogram that is sought to be ultrametricized based on the reference phylogeny&lt;/li&gt;
  &lt;li&gt;use_taxonomy: T/F flag indicating whether or not a taxonomy should be used&lt;/li&gt;
  &lt;li&gt;taxonomy: a linkage table between tips of the phylogeny and clades represented in the tree; rownames of ‘taxonomy’ should be tips found in the phylogeny&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;calibrations: a table of calibrations for the target&lt;/li&gt;
  &lt;li&gt;calibratedTree: a rescaled, ultrametric, “congruified” target tree&lt;/li&gt;
  &lt;li&gt;treePlot: a plot of calibratedTree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Eastman JM, LJ Harmon, and DC Tank. 2013. Congruification: support for time scaling large phylogenetic trees. Methods in Ecology and Evolution, in press.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Megatrees</title>
    <link href="/arborCollections/tutorials/megatrees/"/>
    <updated>2015-10-07T00:00:00+02:00</updated>
    <id>/arborCollections/tutorials/megatrees</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;megatrees&quot;&gt;Megatrees&lt;/h2&gt;

&lt;p&gt;TBA&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Web services</title>
    <link href="/arborCollections/tutorials/web-services/"/>
    <updated>2015-09-02T00:00:00+02:00</updated>
    <id>/arborCollections/tutorials/web-services</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;web-services&quot;&gt;Web services&lt;/h2&gt;

&lt;p&gt;TBA&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>PGLS</title>
    <link href="/arborCollections/tutorials/PGLS-basic/"/>
    <updated>2015-07-17T00:00:00+02:00</updated>
    <id>/arborCollections/tutorials/PGLS-basic</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;use-pgls-to-test-for-a-correlation-between-two-continuous-variables&quot;&gt;Use PGLS to test for a correlation between two continuous variables&lt;/h2&gt;

&lt;p&gt;In this exercise, we will learn how to use PGLS to test for a correlation between two continuous variables. We will use the Arbor function “PGLS,” found in the phylogeny package.&lt;/p&gt;

&lt;p&gt;Imagine that you have a phylogenetic tree with information on two continuous character for some or all of the tips. You want to test whether or not there is an evolutionary correlation between the two traits. PGLS is the way to do this.&lt;/p&gt;

&lt;h2 id=&quot;loading-example-data&quot;&gt;Loading example data&lt;/h2&gt;

&lt;p&gt;For this example, we will use anolis again. Obtain the anolis example data files, phelsuma.phy and phelsuma.csv, from &lt;a href=&quot;/arborCollections/docs_datasets.html&quot;&gt;Arbor datasets&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;p&gt;Now open the &lt;a href=&quot;https://arbor.kitware.com&quot;&gt;Arbor web app&lt;/a&gt;. Drag and drop the two anolis data files on the blue “Browse or drop files” box to load them into your browser.&lt;/p&gt;

&lt;h2 id=&quot;selecting-the-collections-that-you-need&quot;&gt;Selecting the collections that you need&lt;/h2&gt;

&lt;p&gt;For this example, everything required is in the “phylogeny” collection - so click on that eyeball and you will be able to access the functions that you need.&lt;/p&gt;

&lt;p&gt;At this point, you should have the two anolis datafiles stored in Arbor and the “phylogeny” collection available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen1.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this screenshot I am logged in but that is not necessary for this analysis.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-the-pgls-function&quot;&gt;Run the PGLS function&lt;/h2&gt;

&lt;p&gt;Find the PGLS function in the “phylogeny” collection. Select that function now. You can view the source code for it by choosing “show script” (it is in R).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen2.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We could use this function in a workflow, as we did in other Arbor tutorials. But for this tutorial let’s just run the function. To do that, click on the button that says “Setup and run.” In the resulting pop-up menu select the following options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen3.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We will be fitting the model SVL ~ awesomeness, so that SVL is the dependent and awesomeness the independent variable. “BM” means that we will fit a model that assumes that the residuals are distributed as expected under a Brownian motion model of evolution along the branches of the tree.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-your-analysis&quot;&gt;Run your analysis&lt;/h2&gt;

&lt;p&gt;Click “&amp;gt; Run” to run the function. Select these options. If your analysis worked, you should see the following message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen4.jpg&quot; alt=&quot;Screenshot&quot; /&gt;.&lt;/p&gt;

&lt;h2 id=&quot;see-your-results&quot;&gt;See your results&lt;/h2&gt;

&lt;p&gt;Now move over to the “visualization” tab to see your results. The PGLS function creates three outputs: one table showing model coefficients like slopes and intercepts; one table showing a summary of model fit and parameter significance; and a plot.&lt;/p&gt;

&lt;p&gt;To see the table results, choose “table” and choose one of the outputs, either “PGLS coefficients” or “PGLS modelfit_summary”. Update shows you the table. For example, the coefficients look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen5.jpg&quot; alt=&quot;Screenshot&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;To see the plot, select “image” under “Select visualization”, and choose your  plot under “data” (it should be called PGLS pglsPlot). Click “update” to see this result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen6.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;try-another-model&quot;&gt;Try another model&lt;/h2&gt;

&lt;p&gt;If you want to use a different option for PGLS, you can choose that in the setup and run window. For example, we can try OU like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen7.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will notice that the coefficients are slightly different, though the main conclusion is unchanged.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/PGLS/screen8.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Continuous ancestral character states</title>
    <link href="/arborCollections/tutorials/reconstructing-ancestral-characters-continuous/"/>
    <updated>2015-07-13T00:00:00+02:00</updated>
    <id>/arborCollections/tutorials/reconstructing-ancestral-characters-continuous</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;how-to-build-a-workflow-that-can-reconstruct-continuous-ancestral-character-states-on-nodes-in-your-tree-using-arbor&quot;&gt;How to build a workflow that can reconstruct continuous ancestral character states on nodes in your tree using Arbor&lt;/h2&gt;

&lt;p&gt;In this exercise, we will learn how to build a workflow that can reconstruct ancestral character states in Arbor for a continuous character - that is, a character that can take on any continuous value, like body weight or limb length.&lt;/p&gt;

&lt;p&gt;This exercise is quite similar to a tutorial for &lt;a href=&quot;/arborCollections/tutorials/reconstructing-ancestral-characters-discrete/&quot;&gt;ancestral state estimation of discrete characters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Imagine that you have a phylogenetic tree with information on some continuous character for some or all of the tips. You want to use mathematical methods to reconstruct the ancestral character states on the internal nodes of the tree under a Brownian motion model. Then, this is the exercise for you!&lt;/p&gt;

&lt;h2 id=&quot;loading-example-data&quot;&gt;Loading example data&lt;/h2&gt;

&lt;p&gt;For this example, we will use a dataset where the species included in the tree and character data do not match perfectly. Obtain the day gecko example data files, phelsuma.phy and phelsuma.csv, from &lt;a href=&quot;/arborCollections/docs_datasets.html&quot;&gt;Arbor datasets&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;p&gt;If you look at these files, you will see that the tree includes a few unique species for which there is no character data. Arbor will recognize this and drop those species from the analysis.&lt;/p&gt;

&lt;p&gt;Now open the &lt;a href=&quot;https://arbor.kitware.com&quot;&gt;Arbor web app&lt;/a&gt;. Drag and drop the two phelsuma data files on the blue “Browse or drop files” box to load them into your browser.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;/arborCollections/2015/06/09/creating-a-new-collection/&quot;&gt;log in and create a personal collection&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;selecting-the-collections-that-you-need&quot;&gt;Selecting the collections that you need&lt;/h2&gt;

&lt;p&gt;For this example, everything required is in the “phylogeny” collection - so click on that eyeball and you will be able to access the functions that you need.&lt;/p&gt;

&lt;p&gt;At this point, you should have the two anolis datafiles stored in Arbor and the “phylogeny” collection available. You should be logged in and have write access to your own private collection.&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-workflow&quot;&gt;Set up your workflow&lt;/h2&gt;

&lt;p&gt;The main function in Arbor for ancestral state reconstruction is aceAcbor in the “phylogeny” collection. Select that function now. You can view the source code for it by choosing “show script” (it is in R).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen1.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will need to use this function in a workflow to calculate ancestral states and return the output. To start, create a new workflow called ContinuousAncestralStatesWorkflow”. Make sure to choose “New workflow” and not “New analysis”!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen2.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now create the connections you need to make the workflow run. First, click the “edit” button to start working on the workflow.&lt;/p&gt;

&lt;p&gt;Now add the aceArbor function by selecting it under “Select analysis.” When you click “Add to workflow” then the function shoud appear in your workspace.&lt;/p&gt;

&lt;p&gt;Now create the inputs and outputs of the function by clicking on the “spokes” coming out of aceArbor. You should also move the blocks around to make your workflow look nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen3.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To see a more detailed walkthrough of making connections in your workflow, see the tutorial &lt;a href=&quot;/arborCollections/tutorials/reconstructing-ancestral-characters-discrete/&quot;&gt;ancestral state estimation of discrete characters&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once you have a workflow that looks the way you want, click save!&lt;/strong&gt; If you do not do this you will be running the workflow at the last point it was saved and not what is shown on the screen.&lt;/p&gt;

&lt;h2 id=&quot;run-your-workflow&quot;&gt;Run your workflow&lt;/h2&gt;

&lt;p&gt;Click “Setup and run” to run your workflow. Select these options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen4.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your analysis worked, you should see the following message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen6.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;see-your-results&quot;&gt;See your results&lt;/h2&gt;

&lt;p&gt;Now move over to the “visualization” tab to see your results. First, select “image” under “Select visualization”, and choose your tree plot under “data” (it should be called ContinuousAncestralStatesWorkflow treePlot). Click “update” to see this result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen7.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see the results in table format, choose “table” and “ContinuousAncestralStatesWorkflow res”. Update gives you this table, which shows the ancestral state estimates and CIs for each node in the tree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/continuousACE/screen8.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Discrete ancestral character states</title>
    <link href="/arborCollections/tutorials/reconstructing-ancestral-characters-discrete/"/>
    <updated>2015-06-10T00:00:00+02:00</updated>
    <id>/arborCollections/tutorials/reconstructing-ancestral-characters-discrete</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;how-to-reconstruct-discrete-ancestral-character-states-on-nodes-in-your-tree-using-arbor&quot;&gt;How to reconstruct discrete ancestral character states on nodes in your tree using Arbor&lt;/h2&gt;

&lt;p&gt;In this exercise, we will learn how to reconstruct ancestral character states in Arbor for a discrete character - that is, a character that can take on one of a number of discrete values. Examples might be lizards, “legs” versus “no legs” - this would be a two-state discrete character. Another example would be animal locomotion - “walks,” “swims,” or “flies.” This is an example of a three-state discrete character.&lt;/p&gt;

&lt;p&gt;Imagine that you have a phylogenetic tree with information on some discrete character for some or all of the tips. You want to use mathematical methods to reconstruct the ancestral character states on the internal nodes of the tree. Then, this is the exercise for you!&lt;/p&gt;

&lt;h2 id=&quot;loading-example-data&quot;&gt;Loading example data&lt;/h2&gt;

&lt;p&gt;You will need the anolis example data files, anolis.phy and anolis.csv, from &lt;a href=&quot;/arborCollections/docs_datasets.html&quot;&gt;Arbor datasets&lt;/a&gt;. Save those files somewhere on your computer.&lt;/p&gt;

&lt;p&gt;Now open the &lt;a href=&quot;https://arbor.kitware.com&quot;&gt;Arbor web app&lt;/a&gt;. Drag and drop the two anolis data files on the blue “Browse or drop files” box to load them into your browser.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;/arborCollections/2015/06/09/creating-a-new-collection/&quot;&gt;log in and create a personal collection&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;selecting-the-collections-that-you-need&quot;&gt;Selecting the collections that you need&lt;/h2&gt;

&lt;p&gt;For this example, everything required is in the “phylogeny” collection - so click on that eyeball and you will be able to access the functions that you need.&lt;/p&gt;

&lt;p&gt;At this point, you should have the two anolis datafiles stored in Arbor and the “phylogeny” collection available. You should be logged in and have write access to your own private collection.&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-workflow&quot;&gt;Set up your workflow&lt;/h2&gt;

&lt;p&gt;The main function in Arbor for ancestral state reconstruction is aceAcbor in the “phylogeny” collection. Select that function now. You can view the source code for it by choosing “show script” (it is in R).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen1.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will need to use this function in a workflow to calculate ancestral states and return the output. To start, create a new workflow called “DiscreteAncestralStatesWorkflow”. Make sure to choose “New workflow” and not “New analysis”!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen2.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now create the connections you need to make the workflow run. First, click the “edit” button to start working on the workflow.&lt;/p&gt;

&lt;p&gt;Now add the aceArbor function by selecting it under “Select analysis.” When you click “Add to workflow” then the function shoud appear in your workspace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen3.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now create the inputs and outputs of the function by clicking on the “spokes” coming out of aceArbor. You should also move the blocks around to make your workflow look nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/functionPopup.gif&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Final result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen4.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once you have a workflow that looks the way you want, click save!&lt;/strong&gt; If you do not do this you will be running the workflow at the last point it was saved and not what is shown on the screen.&lt;/p&gt;

&lt;h2 id=&quot;run-your-workflow&quot;&gt;Run your workflow&lt;/h2&gt;

&lt;p&gt;Click “Setup and run” to run your workflow. Select these options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen5.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If your analysis worked, you should see the following message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen6.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;see-your-results&quot;&gt;See your results&lt;/h2&gt;

&lt;p&gt;Now move over to the “visualization” tab to see your results. First, select “image” under “Select visualization”, and choose your tree plot under “data” (it should be called DiscreteAncestralStatesWorkflow treePlot). Click “update” to see this result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen7.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see the results in table format, choose “table” and “DiscreteAncestralStatesWorkflow res”. Update gives you this table, which is presently useless. Sorry!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/arborCollections/assets/discreteACE/screen8.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>phylogeneticSignal</title>
    <link href="/arborCollections/collections/phylogeny/charactercalculate/phylogenetic-signal/"/>
    <updated>2015-06-10T00:00:00+02:00</updated>
    <id>/arborCollections/collections/phylogeny/charactercalculate/phylogenetic-signal</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;phylogeneticSignal is a function for estimating and testing for phylogenetic signal. It works for
both discrete and continuous variables, and can use a variety of methods. It calls the aRbor package function &lt;a href=&quot;https://github.com/arborworkflows/aRbor/blob/master/R/physigArbor.R&quot;&gt;physigArbor&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the [docs] (/arborCollections/../docs/ ) page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the phylogeneticSignal function. Choose
the “SVL” column for analysis, and select type: lambda.&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;method: either “K” for Blomberg’s K or “lambda” for Pagel’s lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;p&gt;Function outputs a table with results from the test of phylogenetic signal.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>aceArbor</title>
    <link href="/arborCollections/collections/phylogeny/charactercalculate/ancestral-states/"/>
    <updated>2015-06-10T00:00:00+02:00</updated>
    <id>/arborCollections/collections/phylogeny/charactercalculate/ancestral-states</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;aceArbor is a function for carrying out ancestral state reconstruction. It works for
both discrete and continuous variables, and can reconstruct ancestral character states
under both a maximum-likelihood and a Bayesian framework. The function returns results
in two formats: a table of ancestral state estimates for each node in the tree, and a plot
of the results.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&quot;/arborCollections/../docs/&quot;&gt;docs&lt;/a&gt; page, get anolis.phy and anolis.csv.
Load these files into Arbor, and use them as inputs to the aceArbor function. Choose
the “ecomorph” column for analysis, and select type: discrete and method: marginal.&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table including species names&lt;/li&gt;
  &lt;li&gt;tree: A phylogenetic tree&lt;/li&gt;
  &lt;li&gt;column: The name of the column to analyze&lt;/li&gt;
  &lt;li&gt;type: The character type
    &lt;ul&gt;
      &lt;li&gt;discrete: a character with a discrete number of states&lt;/li&gt;
      &lt;li&gt;continuous: a continuously varying character&lt;/li&gt;
      &lt;li&gt;fromData: will attempt to determine the data type from the data itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;method: specifies the method used to reconstruct ancestral character states
    &lt;ul&gt;
      &lt;li&gt;marginal: marginal ancestral state reconstructions, which reconstruct each node integrating over all possibilities at all other nodes in the tree; this is typically the method used in the literature to reconstruce ACEs&lt;/li&gt;
      &lt;li&gt;joint: joint ancestral reconstructions, which give the configuration of ancestral states that together maximize the likelihood of the data given model parameters&lt;/li&gt;
      &lt;li&gt;mcmc: reconstruct ancestral states using Bayesian MCMC. Note that the discrete version of this doesn’t seem to work, and even if it did work it is not a full MCMC ancestral state method&lt;/li&gt;
      &lt;li&gt;stochastic: create stochastic character map&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;p&gt;Function outputs a table and a plot with results of the ancestral state reconstruction.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

    </content>
  </entry>
  
  <entry>
    <title>addColumns</title>
    <link href="/arborCollections/collections/base/matrix/addColumns/"/>
    <updated>2015-06-10T00:00:00+02:00</updated>
    <id>/arborCollections/collections/base/matrix/addColumns</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      
      &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;addColumns can be used to find the sum of two columns in a data matrix.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;From the [docs] (/arborCollections/../docs/ ) page, get anolis.csv.
Load this files into Arbor, and use it as input to the addColumns function.
Choose “SVL” and “awesomeness” as columnOne and columnTwo, respectively.
Name the outputColumn whatever you want.&lt;/p&gt;

&lt;p&gt;The output is a table with all the data from anolis.csv along with a new column that shows the sum of SVL and awesomeness.&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;table: A data table&lt;/li&gt;
  &lt;li&gt;columnOne and columnTwo: The name of the columns to add&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;
&lt;p&gt;Function outputs a table with a new column appended to the end.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Phylogenetic signal</title>
    <link href="/arborCollections/arborapps/phylogenetic-signal/"/>
    <updated>2015-06-10T00:00:00+02:00</updated>
    <id>/arborCollections/arborapps/phylogenetic-signal</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/arborCollections/images/easyButtons-1600x800.jpg&quot;&gt;&lt;br/&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=https://arbor.kitware.com/phylogenetic-signal/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;https://arbor.kitware.com/phylogenetic-signal/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Ancestral state reconstruction</title>
    <link href="/arborCollections/arborapps/ancestral-state/"/>
    <updated>2015-06-10T00:00:00+02:00</updated>
    <id>/arborCollections/arborapps/ancestral-state</id>
    <author>
      <name>Luke Harmon</name>
      <uri>/arborCollections/</uri>
      <email>lukeh@uidaho.edu</email>
    </author>
    <content type="html">
      &lt;img src=&quot;/arborCollections/images/branch-1600x800.jpg&quot;&gt;&lt;br/&gt;
      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=https://arbor.kitware.com/ancestral-state/&quot; /&gt;

&lt;p&gt;You should be automatically forwarded to the Arbor app. If not, click &lt;a href=&quot;https://arbor.kitware.com/ancestral-state/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  
</feed>