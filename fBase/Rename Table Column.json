{
    "inputs": [
        {
            "format": "rows",
            "name": "datatable",
            "type": "table"
        },
        {
            "description": "CSV list of columns to rename",
            "format": "text",
            "name": "originalColumnNameList",
            "type": "string"
        },
        {
            "description": "CSV list of new names for columns to change",
            "format": "text",
            "name": "newColumnNameList",
            "type": "string"
        }
    ],
    "mode": "python",
    "name": "Rename Table Column",
    "outputs": [
        {
            "format": "rows",
            "name": "newColumnTable",
            "type": "table"
        }
    ],
    "script": "# this analysis expects an input table with a larger number of columns than are desired in the output table.  \n# The analysis also expects a single column input table containing the names of columns to keep in the output table. \n# This is similar to the fieldfile format for mongoDB, with one field per line....\n\n# input: datatable - data table with lots of columns (relatively speaking)\n# input: originalColumnNameList - single string with column names to keep\n# input: newColumnNameList - smaller data table that preserves only the named columns from the input datatable\n# output: newColumnTable\n\n# revision history:\n# 09/16/14 CRL Not working yet\n# 09/17/14 CRL has run on a few datasets using single column replacement, more testing needed\n\n# 03/2015 - uncovered a case where a column name had embedded spaces in it \"Genus _Species\".  Ouch, line 17 deletes the space and then it doesn't match \n# against the original table anymore\n\ninfields = datatable['fields']\nnospaceoriginal = originalColumnNameList.replace(\" \",\"\")\n#nospaceoriginal = originalColumnNameList\nnospacenew = newColumnNameList.replace(\" \",\"\")\noriginallist = nospaceoriginal.split(',')\nnewlist = nospacenew.split(',')\n\n# now loop through the source table and copy records if the column names didn't change.  Assign the value\n# to a new column header if this column name has been changed.  The original and new lists have to be in the same order\n\noutrows = []\nfor row in datatable['rows']:\n    outrow = {}\n    for field in infields:\n        if field in originallist:\n            # assign a new column name to this entry, find it in the same position from the new name list\n            outrow[newlist[originallist.index(field)]] = row[field]\n        else:\n            outrow[field] = row[field]\n    outrows.append(outrow)\n\n# traverse the first row to see what attributes are present in the output table    \noutfields = []    \nfor field in outrows[0]:\n    outfields.append(field)\n      \n# build the output table in table.rows format        \nnewColumnTable = {}\nnewColumnTable['fields'] = outfields\nnewColumnTable['rows'] = outrows\n"
}