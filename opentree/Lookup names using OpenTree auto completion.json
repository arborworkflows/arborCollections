{
    "inputs": [
        {
            "description": "single column table of scientific names",
            "format": "rows",
            "name": "nameTable",
            "type": "table"
        }
    ],
    "mode": "python",
    "name": "Lookup names using OpenTree auto completion",
    "outputs": [
        {
            "description": "three column table of original names, OpenTree TNRS names, and OpenTree taxonomy IDs",
            "format": "rows",
            "name": "outTable",
            "type": "table"
        }
    ],
    "script": "#\n# LookupOpenTreeNames\n#\n# description: this analysis expects a single-column input table consisting of scientific names.\n# The analysis consults the OpenTree API and extracts canonical names from the OpenTree taxonomy.\n# The output table consists of three-columns, with the OpenTree name and taxonomy ID columns added to the input. \n# \n# input: nameTable - single column of scientific names (table:rows format)\n# output: outTable - three column table with OpenTree name and ID appended.\n#\n\nimport requests\n\n# look at the rows of the input table\nmatrixEntries = nameTable['rows']\n\n# find out the title of the columns in this matrix. Assuming this is a single column table\ncolumnHeader = nameTable['fields'][0]\n\noutColumns = []\n\ncount = 0\nfor matrixEntry in matrixEntries:\n    # build an OTL query to return the matching ottId we want to use to request taxa \n    payload = {'queryString': matrixEntry[columnHeader],'contextName':'All life'}\n    resp = requests.post('http://api.opentreeoflife.org/taxomachine/v1/autocompleteBoxQuery',data=payload)\n\n    if (resp.json()) and (resp.json()[0]['name']) and ((resp.json()[0]['higher']) != True):\n#    if (resp.json()) and (resp.json()[0]['name']):\n        count += 1\n        # now write an output record based on the input, but add  the OpenTree canonical name and taxonomy ID\n        outputRecord = {}\n        outputRecord[columnHeader] = matrixEntry[columnHeader]\n        outputRecord['ottName'] =  resp.json()[0]['name']\n        outputRecord['ottId'] = resp.json()[0]['ottId']\n        outColumns.append(outputRecord)\n    else:\n        print \"found no TNRS match for:\",matrixEntry[columnHeader]\n\nprint \"found OTL match for \",count, \" out of \",len(matrixEntries),\" matrix entries\"\n\n# build the headers for the output table\naugmentedColumnHeaders = [columnHeader, 'ottName','ottId']\n\n# setup the output in table:rows format with the headers explicitly listed\noutTable = {'fields': augmentedColumnHeaders,\n            'rows':  outColumns}\n            \n     "
}