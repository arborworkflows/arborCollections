{
    "inputs": [
        {
            "format": "text",
            "name": "taxonName",
            "type": "string"
        },
        {
            "default": "25",
            "format": "number",
            "name": "maxReturnLength",
            "type": "number"
        }
    ],
    "mode": "python",
    "name": "Explore Study Trees from Taxon Name",
    "outputs": [
        {
            "format": "rows",
            "name": "returnedStudies",
            "type": "table"
        }
    ],
    "script": "#\n# OpenTreeExploreNamesFromString\n#\n# description: this analysis expects a comma separated list consisting of scientific names.\n# The analysis consults the OpenTree API and extracts canonical names from the OpenTree taxonomy.\n# The output table consists of several columns containint the OpenTree name and taxonomy ID and other relevant information. \n# \n# input: taxonName - single scientific name(s) separated by commas\n# maxReturnLength - max amount of rows of lookups to return\n# output: outTable -  table with OpenTree name and ID info returned.\n#\n\nimport requests\n\noutrows = []\nstringdebug = ''\n\nreturncount = 0\n\n# build an OTL query to return the matching ottId we want to use to request taxa \npayload = {'property' :'ot:ottTaxonName','value': taxonName,'verbose':'true'}\nresp = requests.post('http://api.opentreeoflife.org/v2/studies/find_trees',data=payload)\n\nreturnedrecs = resp.json()['matched_studies']\n\nfor index in range(len(returnedrecs)):\n    thisresult = returnedrecs[index]\n    returncount += 1\n    outrows.append(thisresult)\n\n    # if we have already returned the max number of rows, break out of the loop             \n    if returncount>maxReturnLength:\n        break;\n\n\n# build the headers for the output table, the return might be empty, so do crash, just return an empty table\noutColumns = []\nif len(returnedrecs) > 0:\n    for column in returnedrecs[0].keys():\n        outColumns.append(column)\n    \n\n# setup the output in table:rows format with the headers explicitly listed\nreturnedStudies = {'fields': outColumns,\n            'rows':  outrows}\n            \n     "
}