{
    "description": "Fits a model to a continuous trait. Model should be one of Brownian motion (= \"BM\"), Ornstein-Uhlenbeck (= \"OU\"), or early-burst (= \"EB\"). Outputs tree with branch lengths transformed to reflect model parameters, a plot of that tree, and a table of parameter estimates, likelihood, and AIC/AICc.",
    "inputs": [
        {
            "format": "r.dataframe",
            "name": "table",
            "type": "table"
        },
        {
            "format": "r.apetree",
            "name": "tree",
            "type": "tree"
        },
        {
            "domain": {
                "format": "column.names",
                "input": "table"
            },
            "format": "text",
            "name": "column",
            "type": "string"
        },
        {
            "default": {
                "data": "BM",
                "format": "text"
            },
            "domain": [
                "BM",
                "OU",
                "EB"
            ],
            "format": "text",
            "name": "model",
            "type": "string"
        }
    ],
    "mode": "r",
    "name": "Fit continuous",
    "outputs": [
        {
            "format": "png.base64",
            "name": "treePlot",
            "type": "image"
        },
        {
            "format": "r.apetree",
            "name": "result",
            "type": "tree"
        },
        {
            "format": "r.dataframe",
            "name": "fit",
            "type": "table"
        }
    ],
    "script": "\n## fitContinuous script\nlibrary(aRbor)\nlibrary(geiger)\nlibrary(cardoonTools)\n\ntd <- make.treedata(tree, table)\ntd <- checkNumeric(td)\nvalid.numeric <- which(colnames(td$dat)==column)\nif(length(valid.numeric)==0){\n  stop(\"The supplied column is not present, or is not a valid continuous trait\")\n}\ntd <- select(td, valid.numeric)\n\no <- fitContinuous(td$phy, td$dat, model=model, SE=0)\nopt = o$opt\n\nif (model == \"OU\") {\n  fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, alpha.param=opt$alpha, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)\n  result<-rescale(tree, \"OU\", o$opt$alpha)\n} else if (model == \"BM\") {\n  fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)\n  result<-tree\n} else if (model == \"EB\") {\n  fit=list(z0.param=opt$z0, sigsq.param=opt$sigsq, a=opt$a, lnL=opt$lnL, AIC=opt$aic, AICc=opt$aicc)\n  result<-rescale(tree, \"EB\", o$opt$a)\n}\n\ntreePlot = cardoonPlot(expression(plotContrasts(result, setNames(td$dat[[column]], td$phy$tip.label), cex.tip.label=0.5)), width=1000, height=1000, res=100)\ntreePlot = treePlot$png"
}